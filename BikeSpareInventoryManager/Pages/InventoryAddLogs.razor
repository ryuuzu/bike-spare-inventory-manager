@page "/add-inventory-logs"

@using BikeSpareInventoryManager.Data;
@using BikeSpareInventoryManager.Data.Model;
@inject NavigationManager NavManager

<MudContainer Class="mt-8 position-relative">
    <MudTable FixedHeader="true" FixedFooter="true" Height="450px" Items="@inventoryLogs" Hover="true" Striped="false" Filter="new Func<InventoryLog,bool>(FilterHandler)" @bind-SelectedItem="selectedItem">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Inventory</MudText>
            <MudSpacer />
            <MudTextField T="string" @bind-Value="toSearch" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" />
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<InventoryLog, object>(invLog => _globalState.CurrentInventory.GetInventoryItem(invLog.ItemId).Name)">Item</MudTableSortLabel></MudTh>
            <MudTh>Quantity</MudTh>
            <MudTh>Added By</MudTh>
            <MudTh>Date Added</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Item">@_globalState.CurrentInventory.GetInventoryItem(context.ItemId).Name</MudTd>
            <MudTd DataLabel="Quantity">@context.Quantity</MudTd>
            <MudTd DataLabel="Added By">@UserService.GetUserFullName(context.LogAuthor)</MudTd>
            <MudTd DataLabel="Date Added">
                @context.LogDate.ToString("MMMM dd, yyyy")
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudContainer>

@code {
    // Global State of the Application
    [CascadingParameter]
    private GlobalState _globalState { get; set; }

    private string toSearch = ""; //String to use for searching in the table
    private InventoryLog selectedItem = null;

    private IEnumerable<InventoryLog> inventoryLogs = new List<InventoryLog>();


    private bool FilterHandler(InventoryLog item) => SearchFilter(item, toSearch);

    private bool SearchFilter(InventoryLog item, string searchString)
    {
        if (_globalState.CurrentUser != null)
        {
            if (item.LogType == InvLogType.Withdraw)
            {
                return false;
            }
        }
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        return false;
    }

    protected override async Task OnInitializedAsync()
    {
        // Condition check if user is not logged in.
        if (_globalState.CurrentUser == null)
        {
            NavManager.NavigateTo("/login"); //Navigating to login
        }

        _globalState.PageName = "Inventory Logs"; // Setting the pagename to display in drawer
        _globalState.RefreshInventory();
        _globalState.RefreshLogs();

        inventoryLogs = InventoryLogService.SetupInventoryLogs(); // Setting up the inventory for processing
    }
}
