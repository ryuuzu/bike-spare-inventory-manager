@page "/inventory"
@inject NavigationManager NavManager
@inject ISnackbar Snackbar

@using BikeSpareInventoryManager.Data
@using BikeSpareInventoryManager.Data.Model
@using BikeSpareInventoryManager.Data.Forms

<MudContainer Class="mt-8 position-relative">
    <MudTable FixedHeader="true" FixedFooter="true" Height="450px" Items="@CurrentItems" Hover="true" Striped="false" Filter="new Func<InventoryItem,bool>(FilterHandler)" @bind-SelectedItem="selectedItem">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Inventory</MudText>
            <MudSpacer />
            <MudTextField T="string" @bind-Value="toSearch" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" />
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<InventoryItem, object>(invItem => invItem.Name)">Name</MudTableSortLabel></MudTh>
            <MudTh>Price</MudTh>
            <MudTh>Quantity</MudTh>
            <MudTh>Created At</MudTh>
            <MudTh>Last Updated</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Price">Rs. @context.Price</MudTd>
            <MudTd DataLabel="Quantity">@context.Quantity</MudTd>
            <MudTd DataLabel="Created At">@context.CreatedAt.ToString("MMMM dd, yyyy")</MudTd>
            <MudTd DataLabel="Last Updated">
                @if (_globalState.InvLogsManager.GetLastUpdatedDate(context.Guid) == default)
                {
                    <MudText>N/A</MudText>
                }
                else
                {
                    @_globalState.InvLogsManager.GetLastUpdatedDate(context.Guid).ToString("MMMM dd, yyyy")
                }
            </MudTd>
            <MudTd DataLabel="Actions">
                <MudButton Variant="Variant.Outlined" Color="Color.Info" StartIcon="@Icons.Material.Rounded.Remove" OnClick="@(() => ToggleWithdrawFromStockPopover(context.Guid))">Withdraw</MudButton> &nbsp;
                @if (_globalState.CurrentUser != null && _globalState.CurrentUser.UserType == UserType.Admin)
                {
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Rounded.Add" OnClick="@(() => ToggleAddToStockPopover(context.Guid))">Add</MudButton>
                }
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
    @if (_globalState.CurrentUser != null && _globalState.CurrentUser.UserType == UserType.Admin)
    {
        <MudFab Class="position-absolute" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="ToggleAddItemPopover" Style="bottom:10px; right:10px;" />
    }
</MudContainer>

<MudPopover OverflowBehavior="OverflowBehavior.FlipNever" Open="@addQuantityPopOver" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter" Class="pa-4 rounded-3" Style="width:40%;">
    <MudForm @ref="_addQuantityForm">
        <MudCardHeader><MudText Typo="Typo.h4">Add More Stock</MudText></MudCardHeader>
        <MudCardContent>
            <MudTextField @bind-Value="quantityToAdd" T="int" Required="true" Label="Quantity" RequiredError="Quantity is required!" Variant="Variant.Outlined" />
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4 mx-auto" OnClick="AddToInventory">Add</MudButton>
            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Secondary" Class="mt-4 mx-auto" OnClick="@(() => ToggleAddToStockPopover(null))">Close</MudButton>
        </MudCardActions>
    </MudForm>
</MudPopover>


<MudPopover OverflowBehavior="OverflowBehavior.FlipNever" Open="@withdrawPopOver" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter" Class="pa-4 rounded-3" Style="width:40%;">
    <MudForm @ref="_withdrawForm">
        <MudCardHeader><MudText Typo="Typo.h4">Withdraw Item</MudText></MudCardHeader>
        <MudCardContent>
            <MudTextField @bind-Value="quantityToWithdraw" T="int" Required="true" Label="Quantity" RequiredError="Quantity is required!" Variant="Variant.Outlined" />
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4 mx-auto" OnClick="WithdrawFromInventory">Withdraw</MudButton>
            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Secondary" Class="mt-4 mx-auto" OnClick="@(() => ToggleWithdrawFromStockPopover(null))">Close</MudButton>
        </MudCardActions>
    </MudForm>
</MudPopover>

<MudPopover OverflowBehavior="OverflowBehavior.FlipNever" Open="@ShowAddItemPopOver" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter" Class="pa-4 rounded-3" Style="width:40%;">
    <EditForm Model="@_itemAddForm" OnValidSubmit="ProcessItemDetails">
        <MudCardHeader><MudText Typo="Typo.h4">Add Item</MudText></MudCardHeader>
        <MudCardContent>
            <MudTextField Label="Name" @bind-Value="_itemAddForm.Name" For="@(() => _itemAddForm.Name)" />
            <MudTextField Label="Description" @bind-Value="_itemAddForm.Description" For="@(() => _itemAddForm.Description)" Lines="5" />
            <MudTextField Label="Price" @bind-Value="_itemAddForm.Price" InputType="InputType.Number" For="@(() => _itemAddForm.Price)" />
            <MudTextField Label="Quantity" @bind-Value="_itemAddForm.Quantity" InputType="InputType.Number" For="@(() => _itemAddForm.Quantity)" />
        </MudCardContent>
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4 mx-auto">Add</MudButton>
            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Secondary" Class="mt-4 mx-auto" OnClick="ToggleAddItemPopover">Close</MudButton>
        </MudCardActions>
    </EditForm>
</MudPopover>

@code {
    // Global State of the Application
    [CascadingParameter]
    private GlobalState _globalState { get; set; }
    private Guid? _activeItem = null;

    private ItemAdditionForm _itemAddForm = new(); //Form to add items into the system
    private bool ShowAddItemPopOver = false; // Bool value to display the popovers

    private MudForm _withdrawForm; //Form to withdraw the item
    private bool withdrawPopOver = false; //Bool value to display the withdraw item popover
    private int quantityToWithdraw = 0; //Default value to withdraw from the inventory

    private MudForm _addQuantityForm; //Form to add more item.
    private bool addQuantityPopOver = false; //Bool value to display the add more item popover
    private int quantityToAdd = 0; //Default value to add to the inventory

    private string toSearch = ""; //String to use for searching in the table
    private InventoryItem selectedItem = null;

    private IEnumerable<InventoryItem> CurrentItems = new List<InventoryItem>();

    private bool FilterHandler(InventoryItem item) => SearchFilter(item, toSearch);

    private bool SearchFilter(InventoryItem item, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (item.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void AddToInventory()
    {
        if (_activeItem == null)
        {
            Snackbar.Add("Item Doesn't Exist! Please try again.", Severity.Error, config => { config.ShowCloseIcon = false; config.VisibleStateDuration = 2000; config.ShowTransitionDuration = 500; config.HideTransitionDuration = 500; });
            _addQuantityForm.Reset();
            ToggleAddToStockPopover(null);
            return;
        }
        Guid itemGuid = _activeItem ?? new Guid();
        _globalState.CurrentInventory.AddItemStock(itemGuid, quantityToAdd);
        _globalState.SaveInventory();
        InventoryLog invLog = new() { ItemId = itemGuid, Quantity = quantityToAdd, LogType = InvLogType.Add, LogAuthor = _globalState.CurrentUser.Guid, LogDate = DateTime.Now };
        InventoryLogService.AddInventoryLog(invLog);
        RefreshInventoryItems();
        _addQuantityForm.Reset();
        ToggleAddToStockPopover(null);
    }

    private void WithdrawFromInventory()
    {

        if (_activeItem == null)
        {
            Snackbar.Add("Item Doesn't Exist! Please try again.", Severity.Error, config => { config.ShowCloseIcon = false; config.VisibleStateDuration = 2000; config.ShowTransitionDuration = 500; config.HideTransitionDuration = 500; });
            _withdrawForm.Reset();
            ToggleWithdrawFromStockPopover(null);
            return;
        }
        Guid itemGuid = _activeItem ?? new Guid();
        InventoryLog invLog = new() { ItemId = itemGuid, Quantity = quantityToWithdraw, LogType = InvLogType.Withdraw, LogAuthor = _globalState.CurrentUser.Guid, LogDate = DateTime.Now };
        InventoryLogService.AddInventoryLog(invLog);
        RefreshInventoryItems();
        _withdrawForm.Reset();
        ToggleWithdrawFromStockPopover(null);
        Snackbar.Add("Item has been requested.", Severity.Success, config => { config.ShowCloseIcon = false; config.VisibleStateDuration = 2000; config.ShowTransitionDuration = 500; config.HideTransitionDuration = 500; });

    }

    protected override async Task OnInitializedAsync()
    {
        // Condition check if user is not logged in.
        if (_globalState.CurrentUser == null)
        {
            NavManager.NavigateTo("/login"); //Navigating to login
        }

        _globalState.PageName = "Inventory"; // Setting the pagename to display in drawer
        _globalState.RefreshInventory();
        _globalState.RefreshLogs();

        CurrentItems = _globalState.CurrentInventory.InventoryItems; // Assigning Items stored in inventory to display in Table
    }

    private void ProcessItemDetails()
    {
        _globalState.CurrentInventory.AddItem(_itemAddForm.GetInventoryItem());
        _globalState.SaveInventory();
        RefreshInventoryItems();
        ToggleAddItemPopover();
        ResetAddForm();
    }

    private void ResetAddForm()
    {
        _itemAddForm.Name = "";
        _itemAddForm.Description = "";
        _itemAddForm.Price = 0.00F;
        _itemAddForm.Quantity = 0;
    }

    private void ToggleAddItemPopover()
    {
        ShowAddItemPopOver = !ShowAddItemPopOver;
    }

    private void ToggleAddToStockPopover(Guid? guid)
    {
        _activeItem = guid;
        addQuantityPopOver = !addQuantityPopOver;
    }


    private void ToggleWithdrawFromStockPopover(Guid? guid)
    {
        _activeItem = guid;
        withdrawPopOver = !withdrawPopOver;
    }

    private void RefreshInventoryItems()
    {
        CurrentItems = _globalState.CurrentInventory.InventoryItems;
    }
}
